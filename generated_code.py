
import numpy as np
# Numba supports CUDA GPU programming by directly compiling a restricted subset of Python code into CUDA kernels and device functions following the CUDA execution model.
# so we use numba to access cuda 
from numba import cuda, types, float32

# just in time compiler is a low-level entry point to the CUDA features in Numba
@cuda.jit
def cuda_matrix_multiplication(A, B, C):
    # each thread in each block is the number of columns in matrices
    thread_per_block = 4
    # define shared arrays with type of float32 for operations
    a = cuda.shared.array(shape=(thread_per_block, thread_per_block), dtype=float32)
    b = cuda.shared.array(shape=(thread_per_block, thread_per_block), dtype=float32)
    # getting block corrdiantes
    x, y = cuda.grid(2)
    a = A
    b = B
    cuda.syncthreads()
    tx = cuda.threadIdx.x
    ty = cuda.threadIdx.y
    block_per_grid = cuda.gridDim.x    # blocks per grid

    # check if return matrix shapes are correct otherwise return
    if x >= C.shape[0] and y >= C.shape[1]:
        return

    if x == 0 and y == 0:C[x, y] = (((((((((a[0] + a[10]) + (a[5] + a[15])) * ((b[0] + b[10]) + (b[5] + b[15]))) + ((a[5] + a[15]) * ((b[4] + b[14]) - (b[0] + b[10])))) - (((a[0] + a[10]) + (a[1] + a[11])) * (b[5] + b[15]))) + (((a[1] + a[11]) - (a[5] + a[15])) * ((b[4] + b[14]) + (b[5] + b[15])))) + (((((a[10] + a[15]) * ((b[8] - b[0]) + (b[13] - b[5]))) + (a[15] * ((b[12] - b[4]) - (b[8] - b[0])))) - ((a[10] + a[11]) * (b[13] - b[5]))) + ((a[11] - a[15]) * ((b[12] - b[4]) + (b[13] - b[5]))))) - ((((((a[0] + a[2]) + (a[5] + a[7])) * (b[10] + b[15])) + ((a[5] + a[7]) * (b[14] - b[10]))) - (((a[0] + a[2]) + (a[1] + a[3])) * b[15])) + (((a[1] + a[3]) - (a[5] + a[7])) * (b[14] + b[15])))) + ((((((a[2] - a[10]) + (a[7] - a[15])) * ((b[8] + b[10]) + (b[13] + b[15]))) + ((a[7] - a[15]) * ((b[12] + b[14]) - (b[8] + b[10])))) - (((a[2] - a[10]) + (a[3] - a[11])) * (b[13] + b[15]))) + (((a[3] - a[11]) - (a[7] - a[15])) * ((b[12] + b[14]) + (b[13] + b[15])))))
    elif x == 0 and y == 1:C[x, y] = ((((((a[0] + a[10]) * ((b[1] + b[11]) - (b[5] + b[15]))) + (((a[0] + a[10]) + (a[1] + a[11])) * (b[5] + b[15]))) + ((a[10] * ((b[9] - b[1]) - (b[13] - b[5]))) + ((a[10] + a[11]) * (b[13] - b[5])))) - (((a[0] + a[2]) * (b[11] - b[15])) + (((a[0] + a[2]) + (a[1] + a[3])) * b[15]))) + (((a[2] - a[10]) * ((b[9] + b[11]) - (b[13] + b[15]))) + (((a[2] - a[10]) + (a[3] - a[11])) * (b[13] + b[15]))))
    elif x == 0 and y == 2:C[x, y] = ((((((a[0] + a[5]) * ((b[2] - b[10]) + (b[7] - b[15]))) + (a[5] * ((b[6] - b[14]) - (b[2] - b[10])))) - ((a[0] + a[1]) * (b[7] - b[15]))) + ((a[1] - a[5]) * ((b[6] - b[14]) + (b[7] - b[15])))) + ((((((a[0] + a[2]) + (a[5] + a[7])) * (b[10] + b[15])) + ((a[5] + a[7]) * (b[14] - b[10]))) - (((a[0] + a[2]) + (a[1] + a[3])) * b[15])) + (((a[1] + a[3]) - (a[5] + a[7])) * (b[14] + b[15]))))
    elif x == 0 and y == 3:C[x, y] = (((a[0] * ((b[3] - b[11]) - (b[7] - b[15]))) + ((a[0] + a[1]) * (b[7] - b[15]))) + (((a[0] + a[2]) * (b[11] - b[15])) + (((a[0] + a[2]) + (a[1] + a[3])) * b[15])))
    elif x == 1 and y == 0:C[x, y] = (((((((a[4] + a[14]) + (a[5] + a[15])) * (b[0] + b[10])) + ((a[5] + a[15]) * ((b[4] + b[14]) - (b[0] + b[10])))) + (((a[14] + a[15]) * (b[8] - b[0])) + (a[15] * ((b[12] - b[4]) - (b[8] - b[0]))))) - ((((a[4] + a[6]) + (a[5] + a[7])) * b[10]) + ((a[5] + a[7]) * (b[14] - b[10])))) + ((((a[6] - a[14]) + (a[7] - a[15])) * (b[8] + b[10])) + ((a[7] - a[15]) * ((b[12] + b[14]) - (b[8] + b[10])))))
    elif x == 1 and y == 1:C[x, y] = ((((((((a[0] + a[10]) * ((b[1] + b[11]) - (b[5] + b[15]))) + (((a[0] + a[10]) + (a[5] + a[15])) * ((b[0] + b[10]) + (b[5] + b[15])))) - (((a[4] + a[14]) + (a[5] + a[15])) * (b[0] + b[10]))) - (((a[0] + a[10]) - (a[4] + a[14])) * ((b[0] + b[10]) + (b[1] + b[11])))) + ((((a[10] * ((b[9] - b[1]) - (b[13] - b[5]))) + ((a[10] + a[15]) * ((b[8] - b[0]) + (b[13] - b[5])))) - ((a[14] + a[15]) * (b[8] - b[0]))) - ((a[10] - a[14]) * ((b[8] - b[0]) + (b[9] - b[1]))))) - (((((a[0] + a[2]) * (b[11] - b[15])) + (((a[0] + a[2]) + (a[5] + a[7])) * (b[10] + b[15]))) - (((a[4] + a[6]) + (a[5] + a[7])) * b[10])) - (((a[0] + a[2]) - (a[4] + a[6])) * (b[10] + b[11])))) + (((((a[2] - a[10]) * ((b[9] + b[11]) - (b[13] + b[15]))) + (((a[2] - a[10]) + (a[7] - a[15])) * ((b[8] + b[10]) + (b[13] + b[15])))) - (((a[6] - a[14]) + (a[7] - a[15])) * (b[8] + b[10]))) - (((a[2] - a[10]) - (a[6] - a[14])) * ((b[8] + b[10]) + (b[9] + b[11])))))
    elif x == 1 and y == 2:C[x, y] = ((((a[4] + a[5]) * (b[2] - b[10])) + (a[5] * ((b[6] - b[14]) - (b[2] - b[10])))) + ((((a[4] + a[6]) + (a[5] + a[7])) * b[10]) + ((a[5] + a[7]) * (b[14] - b[10]))))
    elif x == 1 and y == 3:C[x, y] = (((((a[0] * ((b[3] - b[11]) - (b[7] - b[15]))) + ((a[0] + a[5]) * ((b[2] - b[10]) + (b[7] - b[15])))) - ((a[4] + a[5]) * (b[2] - b[10]))) - ((a[0] - a[4]) * ((b[2] - b[10]) + (b[3] - b[11])))) + (((((a[0] + a[2]) * (b[11] - b[15])) + (((a[0] + a[2]) + (a[5] + a[7])) * (b[10] + b[15]))) - (((a[4] + a[6]) + (a[5] + a[7])) * b[10])) - (((a[0] + a[2]) - (a[4] + a[6])) * (b[10] + b[11]))))
    elif x == 2 and y == 0:C[x, y] = (((((((a[8] + a[10]) + (a[13] + a[15])) * (b[0] + b[5])) + ((a[13] + a[15]) * (b[4] - b[0]))) - (((a[8] + a[10]) + (a[9] + a[11])) * b[5])) + (((a[9] + a[11]) - (a[13] + a[15])) * (b[4] + b[5]))) + (((((a[10] + a[15]) * ((b[8] - b[0]) + (b[13] - b[5]))) + (a[15] * ((b[12] - b[4]) - (b[8] - b[0])))) - ((a[10] + a[11]) * (b[13] - b[5]))) + ((a[11] - a[15]) * ((b[12] - b[4]) + (b[13] - b[5])))))
    elif x == 2 and y == 1:C[x, y] = ((((a[8] + a[10]) * (b[1] - b[5])) + (((a[8] + a[10]) + (a[9] + a[11])) * b[5])) + ((a[10] * ((b[9] - b[1]) - (b[13] - b[5]))) + ((a[10] + a[11]) * (b[13] - b[5]))))
    elif x == 2 and y == 2:C[x, y] = ((((((((a[0] + a[5]) * ((b[2] - b[10]) + (b[7] - b[15]))) + (a[5] * ((b[6] - b[14]) - (b[2] - b[10])))) - ((a[0] + a[1]) * (b[7] - b[15]))) + ((a[1] - a[5]) * ((b[6] - b[14]) + (b[7] - b[15])))) + ((((((a[0] + a[10]) + (a[5] + a[15])) * ((b[0] + b[10]) + (b[5] + b[15]))) + ((a[5] + a[15]) * ((b[4] + b[14]) - (b[0] + b[10])))) - (((a[0] + a[10]) + (a[1] + a[11])) * (b[5] + b[15]))) + (((a[1] + a[11]) - (a[5] + a[15])) * ((b[4] + b[14]) + (b[5] + b[15]))))) - ((((((a[8] + a[10]) + (a[13] + a[15])) * (b[0] + b[5])) + ((a[13] + a[15]) * (b[4] - b[0]))) - (((a[8] + a[10]) + (a[9] + a[11])) * b[5])) + (((a[9] + a[11]) - (a[13] + a[15])) * (b[4] + b[5])))) - ((((((a[0] - a[8]) + (a[5] - a[13])) * ((b[0] + b[2]) + (b[5] + b[7]))) + ((a[5] - a[13]) * ((b[4] + b[6]) - (b[0] + b[2])))) - (((a[0] - a[8]) + (a[1] - a[9])) * (b[5] + b[7]))) + (((a[1] - a[9]) - (a[5] - a[13])) * ((b[4] + b[6]) + (b[5] + b[7])))))
    elif x == 2 and y == 3:C[x, y] = (((((a[0] * ((b[3] - b[11]) - (b[7] - b[15]))) + ((a[0] + a[1]) * (b[7] - b[15]))) + (((a[0] + a[10]) * ((b[1] + b[11]) - (b[5] + b[15]))) + (((a[0] + a[10]) + (a[1] + a[11])) * (b[5] + b[15])))) - (((a[8] + a[10]) * (b[1] - b[5])) + (((a[8] + a[10]) + (a[9] + a[11])) * b[5]))) - (((a[0] - a[8]) * ((b[1] + b[3]) - (b[5] + b[7]))) + (((a[0] - a[8]) + (a[1] - a[9])) * (b[5] + b[7]))))
    elif x == 3 and y == 0:C[x, y] = (((((a[12] + a[14]) + (a[13] + a[15])) * b[0]) + ((a[13] + a[15]) * (b[4] - b[0]))) + (((a[14] + a[15]) * (b[8] - b[0])) + (a[15] * ((b[12] - b[4]) - (b[8] - b[0])))))
    elif x == 3 and y == 1:C[x, y] = ((((((a[8] + a[10]) * (b[1] - b[5])) + (((a[8] + a[10]) + (a[13] + a[15])) * (b[0] + b[5]))) - (((a[12] + a[14]) + (a[13] + a[15])) * b[0])) - (((a[8] + a[10]) - (a[12] + a[14])) * (b[0] + b[1]))) + ((((a[10] * ((b[9] - b[1]) - (b[13] - b[5]))) + ((a[10] + a[15]) * ((b[8] - b[0]) + (b[13] - b[5])))) - ((a[14] + a[15]) * (b[8] - b[0]))) - ((a[10] - a[14]) * ((b[8] - b[0]) + (b[9] - b[1])))))
    elif x == 3 and y == 2:C[x, y] = ((((((a[4] + a[5]) * (b[2] - b[10])) + (a[5] * ((b[6] - b[14]) - (b[2] - b[10])))) + ((((a[4] + a[14]) + (a[5] + a[15])) * (b[0] + b[10])) + ((a[5] + a[15]) * ((b[4] + b[14]) - (b[0] + b[10]))))) - ((((a[12] + a[14]) + (a[13] + a[15])) * b[0]) + ((a[13] + a[15]) * (b[4] - b[0])))) - ((((a[4] - a[12]) + (a[5] - a[13])) * (b[0] + b[2])) + ((a[5] - a[13]) * ((b[4] + b[6]) - (b[0] + b[2])))))
    elif x == 3 and y == 3:C[x, y] = (((((((a[0] * ((b[3] - b[11]) - (b[7] - b[15]))) + ((a[0] + a[5]) * ((b[2] - b[10]) + (b[7] - b[15])))) - ((a[4] + a[5]) * (b[2] - b[10]))) - ((a[0] - a[4]) * ((b[2] - b[10]) + (b[3] - b[11])))) + (((((a[0] + a[10]) * ((b[1] + b[11]) - (b[5] + b[15]))) + (((a[0] + a[10]) + (a[5] + a[15])) * ((b[0] + b[10]) + (b[5] + b[15])))) - (((a[4] + a[14]) + (a[5] + a[15])) * (b[0] + b[10]))) - (((a[0] + a[10]) - (a[4] + a[14])) * ((b[0] + b[10]) + (b[1] + b[11]))))) - (((((a[8] + a[10]) * (b[1] - b[5])) + (((a[8] + a[10]) + (a[13] + a[15])) * (b[0] + b[5]))) - (((a[12] + a[14]) + (a[13] + a[15])) * b[0])) - (((a[8] + a[10]) - (a[12] + a[14])) * (b[0] + b[1])))) - (((((a[0] - a[8]) * ((b[1] + b[3]) - (b[5] + b[7]))) + (((a[0] - a[8]) + (a[5] - a[13])) * ((b[0] + b[2]) + (b[5] + b[7])))) - (((a[4] - a[12]) + (a[5] - a[13])) * (b[0] + b[2]))) - (((a[0] - a[8]) - (a[4] - a[12])) * ((b[0] + b[2]) + (b[1] + b[3])))))
